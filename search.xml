<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>kotlin变量,常量,注释</title>
      <link href="/2018/12/19/kotlin%E5%8F%98%E9%87%8F-%E5%B8%B8%E9%87%8F-%E6%B3%A8%E9%87%8A/"/>
      <url>/2018/12/19/kotlin%E5%8F%98%E9%87%8F-%E5%B8%B8%E9%87%8F-%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<h2 id="定义变量-常量"><a href="#定义变量-常量" class="headerlink" title="定义变量,常量"></a>定义变量,常量</h2><p><strong>声明普通变量</strong><br><code>Kotlin</code> 中定义变量,常量跟<code>Java</code>中有很大区别, <code>kotlin</code>中必须使用<code>var</code>, <code>val</code>关键字修饰<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义变量: 变量可读可写, 定义后可重复赋值, 相当于Java中的普通变量</span><br><span class="line"><span class="keyword">var</span> &lt;变量标识符&gt;: &lt;数据类型&gt; = &lt;初始化值&gt;</span><br><span class="line"></span><br><span class="line">定义常量: 常量可读不可写,一旦定义不能修改其值, 相当于Java中<span class="keyword">final</span>修饰的常量</span><br><span class="line"><span class="keyword">val</span> &lt;常量标识符&gt;: &lt;数据类型&gt; = &lt;初始化值&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: String = <span class="string">"kotlin"</span><span class="comment">//声明时直接赋值</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span>  <span class="comment">//无初始化值时不能省略数据类型</span></span><br><span class="line">age = <span class="number">100</span><span class="comment">//先声明后赋值</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="number">1</span><span class="comment">//自动推断数据类型 Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> PI: <span class="built_in">Double</span> = <span class="number">3.1415</span> <span class="comment">//声明常量直接赋值</span></span><br><span class="line"><span class="comment">// PI = 3.20 此时会报语法错误,val修饰的常量不能重新赋值</span></span><br><span class="line"><span class="keyword">val</span> title: String<span class="comment">//声明常量,暂不赋值</span></span><br><span class="line">title = <span class="string">"kotlin NB"</span><span class="comment">//未赋值的常量可以赋值一次</span></span><br></pre></td></tr></table></figure><p><strong>声明可空变量</strong><br><code>Java</code>中声明的变量不用关心是否为空,只需要在用到的时候添加非空判断即可,否则就会出现著名的<code>NullPointException</code>,这样就可能无形的增加了无用代码.在<code>Kotlin</code>中我们就可以避免这样无用的代码判断,我们可以根据情况来声明变量是否可以为null(可空变量),如果变量不可为空就使用上面我们定义普通变量的形式定义.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可空变量的声明格式:</span><br><span class="line"><span class="keyword">var</span> &lt;变量标识符&gt;: &lt;数据类型&gt;? = &lt;初始值&gt;/<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"><span class="keyword">var</span> title: String? = <span class="string">"kotlin"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span>?</span><br></pre></td></tr></table></figure></p><p>说明:可空变量声明时数据类型不能省略,并且数据类型后面一定要添加<code>?</code>来表示变量是可以为空的</p><h2 id="const修饰的常量"><a href="#const修饰的常量" class="headerlink" title="const修饰的常量"></a>const修饰的常量</h2><blockquote><p>const只能修饰<code>val</code>声明的常量, 不能修饰<code>var</code>声明的变量<br>const修饰常量只能位于顶层或者<code>object</code>声明的对象,或者<code>companion object</code> 声明的伴生对象中<br>const声明的常量必须直接赋值<br>const声明的属性不加限定符的默认为public, 只用<code>val</code>声明的属性限定符默认为private</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>kotlin</code>语言和<code>Java</code>语言一样,都支持在程序里面编写注释,来提高代码的可读性</p><ul><li><p>单行注释(以<code>//</code>开头)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释(块注释, 以<code>/*</code>开头, <code>*/</code>结尾)</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">    代码块一</span></span><br><span class="line"><span class="comment">    代码块二</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><code>kotlin</code>的多行注释跟<code>Java</code>不同的是<code>kotlin</code>的多行注释可以嵌套使用,<code>Java</code>语言不支持嵌套多行注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//下面的嵌套注释在java中是错误的, 在kotlin中是正确的</span></span><br><span class="line"><span class="comment">/*public String name;</span></span><br><span class="line"><span class="comment">  /*public int sex;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> age; </span><br><span class="line"> */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>类注释, 方法注释(以<code>/**</code>开头, 以<code>*/</code>结尾, 语法同<code>Java</code>相同)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义类</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">class Person &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个方法</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment"> fun add(a: Int, b: Int): Int &#123;</span></span><br><span class="line"><span class="comment"> return a + b</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kotlin基本语法</title>
      <link href="/2018/09/11/kotlin%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/09/11/kotlin%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Kotlin是JetBrains推出项目，是一种在Java虚拟机上运行的静态类型编程语言，也可以被编译成为JavaScript源代码。在2011年7月推出之前，它已被开发一年之久。直到2016年2月15日，官方发布了第一个稳定的release版本 —— Kotlin v1.0</p><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> PI: <span class="built_in">Double</span> = <span class="number">3.1415</span><span class="comment">//val 声明的为常量, 赋值后不能修改或重新赋值</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">20</span><span class="comment">//var 声明的为变量</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">15</span>  <span class="comment">//自动推断数据类型为 `Int`</span></span><br><span class="line"><span class="keyword">var</span> name: String<span class="comment">//声明字段如果没有初始值,数据类型不能省略</span></span><br><span class="line">name = <span class="string">"张三"</span></span><br></pre></td></tr></table></figure><h2 id="模板表达式"><a href="#模板表达式" class="headerlink" title="模板表达式"></a>模板表达式</h2><p>模板中既可以使用简单变量,也可以使用任意表达式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line"><span class="keyword">val</span> name = <span class="string">"kotlin"</span></span><br><span class="line"><span class="keyword">val</span> age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"name=<span class="subst">$&#123;name&#125;</span>, age=<span class="subst">$&#123;age&#125;</span>"</span>) <span class="comment">//输出结果: name=kotlin, age=20</span></span><br><span class="line">println(<span class="string">"name=<span class="subst">$&#123;name.replace("k", "K")&#125;</span>, age=<span class="subst">$&#123;age + <span class="number">2</span>&#125;</span>"</span>) <span class="comment">//输出结果: name=Kotlin, age=22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数的声明使用<strong><code>fun</code></strong>关键字<br>定义一个函数,接收两个<code>Int</code>的参数, 返回值也为<code>Int</code>类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数体只有一条语句可以省略&#123;&#125;使用表达式</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure><p>返回<code>Unit</code>的函数<br>如果一个函数没有返回值,那么函数的返回值类型为<code>Unit</code>, 这个数据类型可以省略不写,跟<code>Java</code>中的<code>void</code>类似<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">say</span><span class="params">(msg: <span class="type">String</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">println(<span class="string">"say <span class="variable">$msg</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于:</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">say</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">println(<span class="string">"say <span class="variable">$msg</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于:</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">say</span><span class="params">(msg: <span class="type">String</span>)</span></span> = println(<span class="string">"say <span class="variable">$msg</span>"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printLog</span><span class="params">(tag: <span class="type">String</span> = <span class="string">"XY"</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">println(<span class="string">"<span class="variable">$tag</span>-&gt;<span class="variable">$msg</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">printLog(<span class="string">"log"</span>, <span class="string">"this is log"</span>) <span class="comment">//输出 log-&gt;this is log</span></span><br><span class="line"><span class="comment">//默认参数在无默认参数之前,函数必须使用命名参数来调用</span></span><br><span class="line">printLog(msg = <span class="string">"hello world"</span>) <span class="comment">//输出 XY-&gt;hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/01/hello-world/"/>
      <url>/2018/09/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
